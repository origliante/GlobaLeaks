#!/bin/bash

### BEGIN INIT INFO
# Provides:          globaleaks
# Required-Start:    $local_fs $remote_fs $network $named $time tor
# Required-Stop:     $local_fs $remote_fs $network $named $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the GlobaLeaks server.
# Description:       Start The GlobaLeaks server, an opensource, anonymous,
#                    censorship-resistant whistleblowing platform.
### END INIT INFO

# Author: Giovanni Pellerano <evilaliv3@globaleaks.org>

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=$(basename $(readlink -nf $0))

SCRIPTNAME=$0

if test -e "/etc/default/globaleaks" ; then
   . "/etc/default/globaleaks"
fi

if [ -d "/etc/default/globaleaks.d" ]; then
   for i in "/etc/default/globaleaks.d/"*; do
       if [ -f "$i" ]; then
           ## If the last character is a ~, ignore that file, because it was created
           ## by some editor, which creates backup files.
           if [ "${i: -1}" = "~" ]; then
               true "skip $i"
               continue
           fi
           ## Skipping files such as .dpkg-old and .dpkg-dist.
           if ( echo "$i" | grep -q ".dpkg-" ); then
               true "skip $i"
               continue
           fi
           bash_n_exit_code="0"
           bash_n_output="$(bash -n "$i" 2>&1)" || { bash_n_exit_code="$?" ; true; };
           if [ ! "$bash_n_exit_code" = "0" ]; then
               echo "Invalid config file: $i
bash_n_exit_code: $bash_n_exit_code
bash_n_output:
$bash_n_output" >&2
               exit 1
           fi
           . "$i"
       fi
   done
fi

. /lib/init/vars.sh

. /lib/lsb/init-functions

test $DEBIAN_SCRIPT_DEBUG && set -v -x

if [ "$EUID" -ne "0" ]; then
   echo "Error: GlobaLeaks init script must be run as root" 1>&2
   exit 0
fi

GLBACKEND_PIDFILE=/var/run/globaleaks/globaleaks-${LISTENING_PORT}.pid

if [ "${TRAVIS}" == "true" ]; then
    NETWORK_SANDBOXING=0
fi

# Let's try to figure our some sane defaults:
if [ -r /proc/sys/fs/file-max ]; then
    system_max=`cat /proc/sys/fs/file-max`
    if [ "$system_max" -gt "80000" ] ; then
        MAX_FILEDESCRIPTORS=32768
    elif [ "$system_max" -gt "40000" ] ; then
        MAX_FILEDESCRIPTORS=16384
    elif [ "$system_max" -gt "10000" ] ; then
        MAX_FILEDESCRIPTORS=8192
    else
        MAX_FILEDESCRIPTORS=1024
        cat << EOF

Warning: Your system has very few filedescriptors available in total.

Maybe you should try raising that by adding 'fs.file-max=100000' to your
/etc/sysctl.conf file.  Feel free to pick any number that you deem appropriate.
Then run 'sysctl -p'.  See /proc/sys/fs/file-max for the current value, and
file-nr in the same directory for how many of those are used at the moment.

EOF
        fi
else
        MAX_FILEDESCRIPTORS=8192
fi

read_pid()
{
    if [ -e ${GLBACKEND_PIDFILE} ]; then
        GLBACKEND_PID=`cat ${GLBACKEND_PIDFILE}`
    else
        GLBACKEND_PID=0
    fi
}

check_iptables()
{
    if ! which iptables >/dev/null 2>&1 ; then
        log_action_end_msg 1 "GlobaLeaks Network Sandboxing requires iptables"
        exit 1
    fi

    iptables -nvL -t nat >/dev/null 2>&1
    if [ "$?" -ne "0" ]; then
        log_action_end_msg 1 "missing iptables nat support"
        exit 1
    fi

    iptables -nvL -t filter >/dev/null 2>&1
    if [ "$?" -ne "0" ]; then
        log_action_end_msg 1 "missing iptables filter support"
        exit 1
    fi

    iptables -m owner -h >/dev/null 2>&1
    if [ "$?" -ne "0" ]; then
        log_action_end_msg 1 "missing iptables owner support"
        exit 1
    fi
}

network_sandboxing_start()
{
    log_action_begin_msg "Enabling GlobaLeaks Network Sandboxing"

    check_iptables

    iptables -L | grep ${USERNAME} >/dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        log_action_end_msg 0 "already enabled."
        return
    fi

    # INBOUND
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -A INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT} -s ${IP_SRC} -j ACCEPT
        done
        iptables -A INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT} -j DROP
    done

    # OUTBOUND
    # All outbound connections from GlobaLeaks goes through Tor except of allowed and enstablished connections.
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -d ${IP_SRC} -s ${IP_DST} -j ACCEPT
        done
    done
    iptables -t nat -A OUTPUT ! -o lo -p tcp -m owner --uid-owner ${USERNAME} -m tcp -j REDIRECT --to-ports ${TORTRANSPORT}
    iptables -t nat -A OUTPUT ! -o lo -p udp -m owner --uid-owner ${USERNAME} -m udp --dport 53 -j REDIRECT --to-ports ${TORDNSPORT}
    iptables -t filter -A OUTPUT -p tcp -m owner --uid-owner ${USERNAME} -m tcp --dport ${TORTRANSPORT} -j ACCEPT
    iptables -t filter -A OUTPUT -p udp -m owner --uid-owner ${USERNAME} -m udp --dport 53 -j ACCEPT
    iptables -t filter -A OUTPUT -p tcp -m owner --uid-owner ${USERNAME} -m tcp -d 127.0.0.1 --dport ${TORSOCKSPORT} -j ACCEPT
    iptables -t filter -A OUTPUT ! -o lo -m owner --uid-owner ${USERNAME} -j DROP

    log_action_end_msg 0
}

network_sandboxing_stop()
{
    log_action_begin_msg "Disabling GlobaLeaks Network Sandboxing"

    check_iptables

    iptables -L | grep ${USERNAME} >/dev/null 2>&1
    if [ "$?" -ne "0" ]; then
        log_action_end_msg 0 "already disabled."
        return
    fi

    # INBOUND
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -D INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT} -s ${IP_SRC} -j ACCEPT
        done
        iptables -D INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT}  -j DROP
    done

    # OUTBOUND
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -D OUTPUT -m state --state RELATED,ESTABLISHED -d ${IP_SRC} -s ${IP_DST} -j ACCEPT
        done
    done
    iptables -t nat -D OUTPUT ! -o lo -p tcp -m owner --uid-owner ${USERNAME} -m tcp -j REDIRECT --to-ports ${TORTRANSPORT}
    iptables -t nat -D OUTPUT ! -o lo -p udp -m owner --uid-owner ${USERNAME} -m udp --dport 53 -j REDIRECT --to-ports ${TORDNSPORT}
    iptables -t filter -D OUTPUT -p tcp -m owner --uid-owner ${USERNAME} -m tcp --dport ${TORTRANSPORT} -j ACCEPT
    iptables -t filter -D OUTPUT -p udp -m owner --uid-owner ${USERNAME} -m udp --dport 53 -j ACCEPT
    iptables -t filter -D OUTPUT -p tcp -m owner --uid-owner ${USERNAME} -m tcp -d 127.0.0.1 --dport ${TORSOCKSPORT} -j ACCEPT
    iptables -t filter -D OUTPUT ! -o lo -m owner --uid-owner ${USERNAME} -j DROP

    log_action_end_msg 0
}

do_start()
{
    log_daemon_msg "Starting GlobaLeaks daemon" "globaleaks"

    if [ -n "$MAX_FILEDESCRIPTORS" ]; then
        ulimit -n "$MAX_FILEDESCRIPTORS"
    fi

    GLBACKEND_DAEMON=`which globaleaks`
    if [ ! ${GLBACKEND_DAEMON} ]; then
        log_end_msg 1 "Globlaleaks is not installed"
        exit 1
    fi

    IPS=`echo ${ALLOWED_DST_IP[@]} | tr ' ' ','`
    HOSTS=`echo ${HOSTS_LIST} | tr ' ' ','`

    GLBACKEND_ARGS="--ip=${IPS}
                    --port=${LISTENING_PORT}
                    --accept-host=${HOSTS}
                    --user=${USERNAME} --group=${GROUP}
                    --working-path=${WORKING_DIR}
                    --ramdisk=${RAM_DISK}
                    --tor-dir=${TOR_DIR}
                    --loglevel=${LOGLEVEL}
                    --http-log=${HTTPLOG}"


    if [ "${STORMDEBUG}" -eq "1" ]; then
        GLBACKEND_ARGS+=" --storm-debug"
    fi

    if [ "${DISABLE_MAIL_TORIFICATION}" -eq "1" ]; then
        GLBACKEND_ARGS+=" --disable-mail-torification"
    fi

    STARTCMD="${GLBACKEND_DAEMON} ${GLBACKEND_ARGS}"

    read_pid

    if ! id -u ${USERNAME} >/dev/null 2>&1; then
       log_end_msg 1 "unexistent user (${USERNAME})"
       exit 1
    fi

    # Check to see if the GLBackend daemon is already running.
    if [ "${GLBACKEND_PID}" -ne "0" ]; then
        if kill -0 ${GLBACKEND_PID} >/dev/null 2<&-; then
            log_end_msg 0 "GlobaLeaks already running at pid ${GLBACKEND_PID}"
            exit 0
        fi
    fi

    if [ "${NETWORK_SANDBOXING}" -eq "1" ]; then
        network_sandboxing_start
    fi


    if [ "${APPARMOR_SANDBOXING}" -eq "1" ]; then
        APPARMOR_STARTED=0

        log_action_begin_msg "Enabling GlobaLeaks Apparmor Sandboxing"

        test -x /usr/sbin/aa-status \
            && test -x /usr/sbin/aa-exec \
            && test -e /etc/apparmor.d/usr.bin.globaleaks \
            && /usr/sbin/aa-status --enabled \
            && STARTCMD="/usr/sbin/aa-exec --profile=usr.bin.globaleaks -- $STARTCMD" \
            && APPARMOR_STARTED=1

        if [ "${APPARMOR_STARTED}" -eq "0" ]; then
            log_action_end_msg 1 "Unable to initialized AppArmor! AppArmor is probably disabled, please enable it by following instructions at https://wiki.debian.org/AppArmor/HowToUse"
            log_action_end_msg 1 "If you understand the risks involved and you know what you are doing, you can disable Apparmor's GlobaLeaks support by editing /etc/default/globaleaks and configuring APPARMOR_SANDBOXING=0"
            exit 1
        fi
    fi

    # This is a little hack to avoid python doing os.chdir('.') and getting mad.
    cd /tmp

    gl-fix-permissions

    if ${STARTCMD}; then
        log_end_msg 0 "started."
    else
        log_end_msg 1 "problem when starting."
    fi
}

do_stop()
{
    log_daemon_msg "Stopping GlobaLeaks daemon" "globaleaks"

    read_pid

    if [ "${GLBACKEND_PID}" -eq "0" ] || [ kill -0 ${GLBACKEND_PID} >/dev/null 2<&- ]; then
        log_end_msg 0 "not running."
    else
        kill -15 ${GLBACKEND_PID} >/dev/null 2<&-
        log_end_msg 0 "stopped."
    fi

    if [ "${NETWORK_SANDBOXING}" -eq "1" ]; then
        network_sandboxing_stop
    fi

}

do_restart()
{
    do_stop

    GLBACKEND_PID=0

    do_start
}

#
# Function that queries the status of the daemon/service
#

case "$1" in
  start)
	do_start
    exit 0
	;;
  stop)
	do_stop
    exit 0
    ;;
  status)
    if test ! -r $(dirname ${GLBACKEND_PIDFILE}); then
        log_failure_msg "cannot read PID file ${GLBACKEND_PIDFILE}"
        exit 4
    fi
    pid=`cat ${GLBACKEND_PIDFILE} 2>/dev/null` || true
    if test ! -f ${GLBACKEND_PIDFILE} -o -z "$pid"; then
        log_failure_msg "GlobaLeaks is not running"
        exit 3
    fi
    if ps "$pid" >/dev/null 2>&1; then
        log_success_msg "GlobaLeaks is running"
        exit 0
    else
        log_failure_msg "GlobaLeaks is not running"
        exit 1
    fi
    ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_restart
    exit 0
	;;
  *)
	log_action_msg "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 1
	;;
esac
